### python 3 codes ###
# remotely use Pitt HTC cluster
# python=python/anaconda3.8-2020.11 (Python 3.8.5.final.0); pandas=1.1.3; numpy=1.19.2;

### To make mock SAM file for UMI-tools to correct Barcode_v2 sequence based on UMI-tools corrected 5'end_UMI+actual_TSS sequence

# Input-1: [DTmerge-MASTER-all_final-info_table.csv] containing information for all MASTER samples
# Input-2: [sam_header19.sam] containing first 19 lines of an example SAM file for S.c.
# Input-3s: UMI-tools output files [*-mockUmiCXonTssBar-sorted-grouped.tsv] generated by <4-UMItools-Umi_CX.slurm>
    # 9 columns
# Input-4s: actlTSS-Barcode Index file [*-TssBar_idx.txt] generated by <3-MkMockSam-UmiOnTssBar.py>

# Output-1: 5'end_UMI+actual_TSS Index file [*-UmiCXed-UmiTss_idx.txt]
    # 2 columns, w/o titles: [Umi_actlTSS] \t [index]
# Output-2: mock SAM files [*-UmiCXed-mockBarCXonUmiTss.sam] for UMI-tools to correct 24bp_Barcode
# Output-3: [5-MkMockSam-UmiCXed-BarOnUmiTss-info.csv], details for processed samples

import datetime
job_start = datetime.datetime.now()
print(job_start)

import pandas as pd

# qname1 = 'Best wishes for all PhD students'
flag2 = 0 # "mapped to the forward strand"
rname3 = 'II'
# pos4 = 20160111 # 1st day in Kaplan lab :)
mapq5 = 60 # indicates uniquely mapped read
cigar6 = '21M'
rnext7 = '*'
pnext8 = 0
tlen9 = 0
seq10 = 'TCTATGGCTAGAACATATTAT'
qual11 = 'LikesSoccerScienceArt'

cmn_folder = '/bgfs/ckaplan/Yunye/0-common_files/'
inp_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/12345-Ts_b1-extr_CX_ddp/3_4-UmiOnTssBar/'
out_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/12345-Ts_b1-extr_CX_ddp/5_6-UmiCXed-BarOnUmiTss/'

smp_info = pd.read_csv(cmn_folder+'DTmerge-MASTER-all_final-info_table.csv', na_filter= False) # w/o filling empty cells as NaN
# to process TSSseq_b1 of all final samples (3x3x5=45):
smp_info = smp_info[smp_info['final'] == 'yes']

# table to collect info for each sample
op_info = smp_info[['super_id','PolII','lib','rep']].set_index('super_id')

for _, smp in smp_info.iterrows():
    file_prefix = smp['lib']+'_'+smp['PolII']+'_'+smp['rep']+'_b1-'
    op_info.loc[smp['super_id'],'file_prefix'] = file_prefix
    op_info.loc[smp['super_id'],'input_mtx'] = file_prefix+'mockUmiCXonTssBar-sorted-grouped.tsv'
    op_info.loc[smp['super_id'],'input_idx'] = file_prefix+'TssBar_idx.txt'

    ## Get actual_TSS-24bp_Bar infomation back based on actlTSS_Barcode-index files
    TssBar_idx = dict([idx_line.split() for idx_line in open(inp_folder+file_prefix+'TssBar_idx.txt', 'r')])
    idx_TssBar = dict((v,k) for (k,v) in TssBar_idx.items())

    grp = pd.read_csv(inp_folder+file_prefix+'mockUmiCXonTssBar-sorted-grouped.tsv', sep='\t', index_col=False)[['position','final_umi','final_umi_count']].drop_duplicates()
    grp['actlTSS_Bar'] = ((grp['position']+1).apply(str)).map(idx_TssBar)
        # +1 because 1) Alignment position is not the start position of the read in the BAM file but the start of the read taking into account the read strand and cigar
        #            2) when making mock SAM file, "0" was put in FLAG field, which means "mapped to the forward strand"
        #            3) UMI-tools uses 0-indexed but SAM uses 1-indexed
    grp['actlTSS'] = grp['actlTSS_Bar'].str.slice(start=0, stop=-24)
    grp['Barcode24'] = grp['actlTSS_Bar'].str.slice(start=-24)
    grp['CXed_Umi'] = grp['final_umi']
    grp['RNA_Count'] = grp['final_umi_count']
 
    ## To make and save Umi_actlTSS-Index file
    UmiTss = grp[['CXed_Umi', 'actlTSS']].drop_duplicates().reset_index().drop('index', axis=1)
    UmiTss.index = UmiTss.index + 1 # SAM uses 1-indexed
    UmiTss['CXedUmi_actlTSS'] = UmiTss['CXed_Umi'] + UmiTss['actlTSS']
    UmiTss.reset_index()[['CXedUmi_actlTSS','index']].to_csv(out_folder+file_prefix+'UmiCXed-UmiTss_idx.txt', sep='\t', index=False, header=False)

    ## To make mock SAM file
    UmiTss_idx = dict([idx_line2.split() for idx_line2 in open(out_folder+file_prefix+'UmiCXed-UmiTss_idx.txt', 'r')])

    fout = open(out_folder+file_prefix+'UmiCXed-mockBarCXonUmiTss.sam', 'w')
    
    samHeader = [sam_line.rstrip() for sam_line in open(cmn_folder+'sam_header19.sam', 'r')]
    print("\n".join(samHeader), file = fout)

    row_num = 0 # to record # of Umi-actlTSS-Barcode variants
    readIn = 0
    readOut = 0
    grp = grp[['CXed_Umi','actlTSS','Barcode24','RNA_Count']]
    for index, row in grp.iterrows():
        # row['CXed_Umi']; row['actlTSS']; row['Barcode24']; row['RNA_Count']
        row_num += 1
        readIn += int(row['RNA_Count'])
        for _ in range(int(row['RNA_Count'])):
            readOut += 1
            qname1 = 'Mock'+ str(readOut) + '_' + row['Barcode24']
            print("%s\t%d\t%s\t%d\t%d\t%s\t%s\t%d\t%d\t%s\t%s" % \
                  (qname1, flag2,rname3, int(UmiTss_idx[row['CXed_Umi']+row['actlTSS']]), mapq5,cigar6,rnext7,pnext8,tlen9,seq10,qual11), file = fout)

    op_info.loc[smp['super_id'],'n_reads_input'] = readIn
    op_info.loc[smp['super_id'],'n_reads_output'] = readOut
    op_info.loc[smp['super_id'],'n_Umi_actlTSS_Bar_variants_input'] = row_num

op_info.reset_index().to_csv('5-MkMockSam-UmiCXed-BarOnUmiTss-info.csv', sep=',', index=False, header=True, mode='w')
    
job_end = datetime.datetime.now()
print("job finished in", datetime.timedelta.total_seconds(job_end - job_start)/60, 'mins at', job_end)
