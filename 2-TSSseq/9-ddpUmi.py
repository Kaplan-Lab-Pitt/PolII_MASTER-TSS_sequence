### python 3 codes ###
# remotely use Pitt HTC cluster
# python=python/anaconda3.8-2020.11 (Python 3.8.5.final.0); pandas=1.1.3; numpy=1.19.2;

### deduplication of RNA reads based on 5'end_15bp_UMI ###

# Input-1: [DTmerge-MASTER-all_final-info_table.csv] containing information for all MASTER samples
# Input-2s: UMI-tools output files [*-UmiBarCXed-mockTssCXonUmiBar-sorted-grouped.tsv] generated by <8-UMItools-UmiBarCXed-Tss_CX.slurm>
    # 9 columns
# Input-3s: 5'end_UMI+24bp_Barcode Index file [*-UmiBarCXed-UmiBar_idx.txt] generated by <7-MkMockSam-UmiBarCXed-TssOnUmiBar.py>

# Output-1: [*-CXed-Umi_actlTss_Bar_Cnt-Mtx.txt] , matrix after CX but before Umi-based deduplication
    # 4 columns, [5UMI] \t [actlTSS] \t [Barcode24] \t [RNA_Count]
# Output-2: [*-CXed-dupDist.csv], PCR Amplification duplication distribution
# Output-3: [*-CXed-actlTss_Bar_ddpCnt-mtrx.txt] , matrix after Umi-based deduplication
    # 3 columns, [actlTSS] \t [Barcode24] \t [RNA_ddpCount]
# Output-4: [9-ddpUmi-info.csv], details for processed samples

import datetime
job_start = datetime.datetime.now()
print(job_start)

import pandas as pd

cmn_folder = '/bgfs/ckaplan/Yunye/0-common_files/'
inp_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/12345-Ts_b1-extr_CX_ddp/7_8-UmiBarCXed-TssOnUmiBar/'
out_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/12345-Ts_b1-extr_CX_ddp/9-ddpUmi/'

smp_info = pd.read_csv(cmn_folder+'DTmerge-MASTER-all_final-info_table.csv', na_filter= False) # w/o filling empty cells as NaN
# to process TSSseq_b1 of all final samples (3x3x5=45):
smp_info = smp_info[smp_info['final'] == 'yes']

# table to collect info for each sample
op_info = smp_info[['super_id','PolII','lib','rep']].set_index('super_id')

for _, smp in smp_info.iterrows():
    file_prefix = smp['lib']+'_'+smp['PolII']+'_'+smp['rep']+'_b1-'
    op_info.loc[smp['super_id'],'file_prefix'] = file_prefix
    op_info.loc[smp['super_id'],'input_mtx'] = file_prefix+'UmiBarCXed-mockTssCXonUmiBar-sorted-grouped.tsv'
    op_info.loc[smp['super_id'],'input_idx'] = file_prefix+'UmiBarCXed-UmiBar_idx.txt'
    
    # Get 5End_UMI-24bp_Barcoded infomation back based on Index file
    UmiBar_idx = dict([idx_line.split() for idx_line in open(inp_folder+file_prefix+'UmiBarCXed-UmiBar_idx.txt', 'r')])
    idx_UmiBar = dict((v,k) for (k,v) in UmiBar_idx.items())

    grp = pd.read_csv(inp_folder+file_prefix+'UmiBarCXed-mockTssCXonUmiBar-sorted-grouped.tsv', sep='\t', index_col=False)\
            [['position','final_umi','final_umi_count']].drop_duplicates()
    grp['5UMI_24Bar'] = ((grp['position']+1).apply(str)).map(idx_UmiBar)
        # +1 because 1) Alignment position is not the start position of the read in the BAM file but the start of the read taking into account the read strand and cigar
        #            2) when making mock SAM file, "0" was put in FLAG field, which means "mapped to the forward strand"
        #            3) UMI-tools uses 0-indexed but SAM uses 1-indexed
    grp['5UMI'] = grp['5UMI_24Bar'].str.slice(start=0, stop=15)
    grp['Barcode24'] = grp['5UMI_24Bar'].str.slice(start=15)
    grp['actlTSS'] = grp['final_umi'].str.rstrip('Z') # remove "stuff" Zs at the end
    grp['RNA_Count'] = grp['final_umi_count']
    
    mtx = grp[['5UMI','actlTSS','Barcode24','RNA_Count']]   
    mtx.to_csv(out_folder+file_prefix+'CXed-Umi_actlTss_Bar_Cnt-Mtx.txt', sep='\t', index=False) # Output-1
    op_info.loc[smp['super_id'],'n_Umi_actlTSS_Bar_variants_BF_ddp'] = mtx.shape[0]

    # PCR Amplification duplication distribution; Output-2
        # each Umi is supposed to be observed once (as one RNA_count) or equally (all have same #RNA_count)
    mtx.groupby('RNA_Count').count().drop(['actlTSS', 'Barcode24'],axis=1).reset_index()\
       .to_csv(out_folder+file_prefix+'CXed-dupDist.csv', index=False)
    
    # deduplicate based on 5'UMI, generate [actlTSS] \t [Barcode24] \t [RNA_ddpCount] matrix for DNAseq-RNAseq merge
        # deduplication means, regardless of RNA_count, each Umi will be counted as one "actual RNA"
    ddp_mtx = mtx.groupby(['actlTSS','Barcode24']).count().drop(['RNA_Count'],axis=1).reset_index()\
       .rename(columns={'5UMI':'RNA_ddpCount'})
    ddp_mtx.to_csv(out_folder+file_prefix+'CXed-actlTss_Bar_ddpCnt-mtrx.txt', sep='\t', index=False)
    op_info.loc[smp['super_id'],'n_ttl_RNA_ddpCount'] = ddp_mtx['RNA_ddpCount'].sum()
    op_info.loc[smp['super_id'],'n_actlTSS_Bar_var'] = ddp_mtx.shape[0]
    op_info.loc[smp['super_id'],'n_Bar_var'] = ddp_mtx['Barcode24'].drop_duplicates().count()
    
op_info.reset_index().to_csv('9-ddpUmi-info.csv', sep=',', index=False, header=True, mode='w')
    
job_end = datetime.datetime.now()
print("job finished in", datetime.timedelta.total_seconds(job_end - job_start)/60, 'mins at', job_end)
