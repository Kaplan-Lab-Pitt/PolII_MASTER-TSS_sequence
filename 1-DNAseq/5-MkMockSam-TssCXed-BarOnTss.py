### python 3 codes ###
# remotely use Pitt HTC cluster
# python=python/anaconda3.8-2020.11 (Python 3.8.5.final.0); pandas=1.1.3; numpy=1.19.2;

### To make mock SAM file for UMI-tools to correct Barcode_v2 sequence based on UMI-tools corrected TSS sequence

# Input-1: [DTmerge-MASTER-all_final-info_table.csv] containing information for all MASTER samples
# Input-2: [sam_header19.sam] containing first 19 lines of an example SAM file for S.c.
# Input-3s: UMI-tools output files [*-mockTssCXonBar-sorted-grouped.tsv] generated by <4-UMItools-Tss_CX.slurm>
    # 9 columns
# Input-4s: Barcode Index file [*-Bar_idx.txt] generated by <3-MkMockSam-TssOnBar.py>

# Output-1: TSS Index file [*-TssCXed-Tss_idx.txt]
    # 2 columns, w/o titles: [TSS] \t [index]
# Output-2: mock SAM files [*-TssCXed-mockBarCXonTss.sam] for UMI-tools to correct 24bp_Barcode

import datetime
job_start = datetime.datetime.now()
print(job_start)

import pandas as pd
print("pandas version:", pd.__version__)
print()

# qname1 = 'Best wishes for all PhD students'
flag2 = 0 # "mapped to the forward strand"
rname3 = 'II'
# pos4 = 20160111 # 1st day in Kaplan lab :)
mapq5 = 60 # indicates uniquely mapped read
cigar6 = '21M'
rnext7 = '*'
pnext8 = 0
tlen9 = 0
seq10 = 'TCTATGGCTAGAACATATTAT'
qual11 = 'LikesSoccerScienceArt'

cmn_folder = '/bgfs/ckaplan/Yunye/0-common_files/'
inp_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/1-WT-DNAseq-TxGen_18179Kap/3_4-MkMockSam-TssOnBar/'
out_folder = '/bgfs/ckaplan/Yunye/3-TSS_sequence_library/1-WT-DNAseq-TxGen_18179Kap/5_6-TssCXed-BarOnTss/'

smp_info_file = cmn_folder+'DTmerge-MASTER-all_final-info_table.csv'
smp_info = pd.read_csv(smp_info_file, na_filter= False) # w/o filling empty cells as NaN
# to only processing samples with DNAseq:
smp_info = smp_info[smp_info['super_id']<=12]

# table to collect info for each sample
op_info = smp_info[['super_id','PolII','lib','rep']].set_index('super_id')

for _, smp in smp_info.iterrows():
    file_prefix = smp['lib']+'_'+smp['PolII']+'_'+smp['rep']+'-Ds-'
    op_info.loc[smp['super_id'],'file_prefix'] = file_prefix
    op_info.loc[smp['super_id'],'input_mtx'] = file_prefix+'mockTssCXonBar-sorted-grouped.tsv'
    op_info.loc[smp['super_id'],'input_idx'] = file_prefix+'Bar_idx.txt'

    ## Get 24bp_Bar infomation back based on 24bp_Bar-Index file
    Bar_idx = dict([idx_line.split() for idx_line in open(inp_folder+file_prefix+'Bar_idx.txt', 'r')])
    idx_Bar = dict((v,k) for (k,v) in Bar_idx.items())

    grp = pd.read_csv(inp_folder+file_prefix+'mockTssCXonBar-sorted-grouped.tsv', sep='\t', index_col=False)[['position','final_umi','final_umi_count']].drop_duplicates()
    grp['24Bar'] = ((grp['position']+1).apply(str)).map(idx_Bar)
        # +1 because 1) Alignment position is not the start position of the read in the BAM file but the start of the read taking into account the read strand and cigar
        #            2) when making mock SAM file, "0" was put in FLAG field, which means "mapped to the forward strand"
        #            3) UMI-tools uses 0-indexed but SAM uses 1-indexed
    grp['CXed_TSS'] = grp['final_umi']
    grp['DNA_Count'] = grp['final_umi_count']
 
    ## To make and save Tss-Index file
    Tss = grp['CXed_TSS'].drop_duplicates().reset_index().drop('index', axis=1)
    Tss.index = Tss.index + 1 # SAM uses 1-indexed
    Tss.reset_index()[['CXed_TSS','index']].to_csv(out_folder+file_prefix+'TssCXed-Tss_idx.txt', sep='\t', index=False, header=False)

    ## To make mock SAM file
    Tss_idx = dict([idx_line2.split() for idx_line2 in open(out_folder+file_prefix+'TssCXed-Tss_idx.txt', 'r')])

    fout = open(out_folder+file_prefix+'TssCXed-mockBarCXonTss.sam', 'w')
    
    samHeader = [sam_line.rstrip() for sam_line in open(cmn_folder+'sam_header19.sam', 'r')]
    print("\n".join(samHeader), file = fout)

    row_num = 0 # to record # of TSS-Barcode variants
    readIn = 0
    readOut = 0
    grp = grp[['24Bar','CXed_TSS','DNA_Count']]
    for index, row in grp.iterrows():
        # row['24Bar']; row['CXed_TSS']; row['DNA_Count']
        row_num += 1
        readIn += int(row['DNA_Count'])
        for _ in range(int(row['DNA_Count'])):
            readOut += 1
            qname1 = 'Mock'+ str(readOut) + '_' + row['24Bar']
            print("%s\t%d\t%s\t%d\t%d\t%s\t%s\t%d\t%d\t%s\t%s" % \
                  (qname1, flag2,rname3, int(Tss_idx[row['CXed_TSS']]), mapq5,cigar6,rnext7,pnext8,tlen9,seq10,qual11), file = fout)

    op_info.loc[smp['super_id'],'n_reads_input'] = readIn
    op_info.loc[smp['super_id'],'n_reads_output'] = readOut
    op_info.loc[smp['super_id'],'n_TSS_Bar_variants_input'] = row_num

op_info.reset_index().to_csv('5-MkMockSam-TssCXed-BarOnTss-info.csv', sep=',', index=False, header=True, mode='w')
    
job_end = datetime.datetime.now()
print("job finished in", datetime.timedelta.total_seconds(job_end - job_start)/60, 'mins at', job_end)
